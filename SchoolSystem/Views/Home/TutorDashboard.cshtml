@model SchoolSystem.ViewModels.TutorDashboardVM

<h2>Tutor Dashboard</h2>

<p>Tutor Name: @Model.TutorName</p>
<p>Uploaded Documents: @Model.UploadedDocuments</p>

<h3>Recent Comments</h3>
<ul>
    @foreach (var comment in Model.RecentComments)
    {
        <li>@comment</li>
    }
</ul>

<h3>Recent Messages</h3>
<ul>
    @foreach (var message in Model.RecentMessages)
    {
        <li>@message.TextContent</li>
    }
</ul>

<h3>Assigned Groups</h3>
<ul>
    @foreach (var group in Model.AssignedGroups)
    {
        <li>@group.Id</li>
    }
</ul>

<h3>Search and Filter</h3>
<form method="get" asp-action="Dashboard">
    <div class="form-group">
        <label for="searchName">Search by Name:</label>
        <input type="text" id="searchName" name="searchName" value="@Model.SearchName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="groupId">Filter by Group:</label>
        <select id="groupId" name="groupId" class="form-control">
            <option value="">All Groups</option>
            @foreach (var group in Model.AssignedGroups)
            {
                var selectedGroupId = Model.FilteredStudents.FirstOrDefault()?.GroupUsers.FirstOrDefault()?.GroupId;
                var isSelected = group.Id == selectedGroupId ? "selected" : "";
                <option value="@group.Id" selected="@isSelected">@group.Id</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary" style="z-index: 1000; position: relative;">Search</button>
</form>

<h3>Filtered Students</h3>
<ul>
    @foreach (var student in Model.FilteredStudents)
    {
        <li>@student.Name</li>
    }
</ul>


<h4>Groups list</h4>
@foreach (var group in Model.AssignedGroups)
{
    <div>
        <ul>
            @foreach (var groupUser in Model.GroupUsersWithRoles.Where(gu => gu.User.GroupUsers.Any(ggu => ggu.GroupId == group.Id)))
            {
                <li>
                    Name: @groupUser.User.Name - Roles: @string.Join(", ", groupUser.Roles)
                    @if (groupUser.Roles.Contains("Student"))
                    {
                        <form asp-action="RemoveStudentFromGroup" method="post" class="remove-student-form" style="display:inline;">
                            <input type="hidden" name="groupId" value="@group.Id" />
                            <input type="hidden" name="studentId" value="@groupUser.User.Id" />
                            <button type="submit" class="btn btn-link btn-sm remove-button">&#x2716;</button> <!-- Unicode character for X -->
                        </form>
                    }
                </li>
            }
        </ul>
    </div>
}


<style>
    .remove-button {
        color: red;
        padding: 0;
        border: none;
        background: none;
        cursor: pointer;
        font-size: 1rem;
        margin-left: 10px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.remove-student-form').forEach(form => {
            form.addEventListener('submit', async function (event) {
                event.preventDefault();
                const formData = new FormData(this);
                const response = await fetch(this.action, {
                    method: this.method,
                    body: formData
                });
                if (response.ok) {
                    this.closest('li').remove();
                } else {
                    alert('Failed to remove student.');
                }
            });
        });
    });
</script>
